name: "Validate metadata"
description: "Validate a datapackage file"
inputs:
  token:
    description: "A Github PAT"
    required: true
outputs:
  VALID_METADATA:
    description: "Variable containing if metadata is valid or not"
    value: ${{ steps.set-valid-metadata.outputs.VALID_METADATA }}
runs:
  using: "composite"
  steps:
    - name: Install dotoenv
      shell: bash
      run: pip3 install python-dotenv
    - name: Install datapackage
      shell: bash
      run: pip3 install datapackage
    - name: Get validation output
      shell: bash
      run: |
        FRICTIONLESS_OUTPUT=$(python .github/datahub-gh-actions/validate-metadata/validate.py || true)
        echo 'COMMIT_BODY<<EOF' >> $GITHUB_ENV
        echo "$FRICTIONLESS_OUTPUT" >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
    - name: Validate and error throw if error
      if: always()
      shell: bash
      id: validate
      run: |
        python .github/datahub-gh-actions/validate-metadata/validate.py
    - name: true if valid, false if invalid metadata
      shell: bash
      if: always()
      id: set-valid-metadata
      run: |
        VALID_METADATA=$(python .github/datahub-gh-actions/validate-metadata/set_valid_metadata_flag.py)
        echo $VALID_METADATA >> valid_metadata.txt
        echo "VALID_METADATA=$VALID_METADATA" >> $GITHUB_OUTPUT
    - name: Archive metadata validation results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: metadata-validation-result
        path: valid_metadata.txt
    - name: Make a comment in the commit page
      uses: peter-evans/commit-comment@v2
      if: ${{ contains(steps.set-valid-metadata.outputs.VALID_METADATA, false) }}
      with:
        body: |
          ```
          ${{ env.COMMIT_BODY }}
          ```
        token: ${{inputs.token}}
