name: "Index datapackage"
description: "Installs a package and runs a python script"
runs:
  using: "composite"
  steps:
    - name: Install typesense
      shell: bash
      run: pip3 install typesense
    - name: Install dotoenv
      shell: bash
      run: pip3 install python-dotenv
    - name: Check directory
      shell: bash
      run: pwd
    - name: Run Python Script
      shell: python
      run: |
        import sys
        import time
        import os
        import json
        import typesense

        from dotenv import load_dotenv

        load_dotenv()

        def init_client():
            host = os.getenv('TYPESENSE_HOST')
            api_key = os.getenv('TYPESENSE_API_KEY')
            client = typesense.Client({
                'nodes': [{
                'host': host,
                'port': '443',
                'protocol': 'https'
              }],
            'api_key': api_key,
            'connection_timeout_seconds': 2
            })
            return client

        def get_datapackage(filename: str):
            script_dir = os.path.dirname(__file__)
            full_path = f"/home/runner/work/{os.getenv('REPO_NAME')}/{os.getenv('REPO_NAME')}/datasets/{filename}/datapackage.json"
            try:
                f = open(full_path)
                data = json.load(f)
                return data
            except:
                raise Exception(f"It wasnt possible to get the datapackage at {full_path}")

        def flatten_schema(schema: list):
            return list(map(lambda x: x['name'], schema))

        def main():
            'Get JSON, flatten, index into tina'
            if os.getenv('DATASET_NAME') is None:
                raise Exception("Lacking a filename argument")
            filename = os.getenv('DATASET_NAME')
            datapackage = get_datapackage(filename)
            schema_fields = flatten_schema(datapackage['resources'][0]['schema']['fields']) if "schema" in datapackage['resources'][0] else []
            valid_metadata = os.getenv('VALID_METADATA')
            valid_data = os.getenv('VALID_DATA')
            document = {
                'id': datapackage['name'],
                'name': datapackage['name'],
                'keywords': datapackage.get('keywords', []),
                'terms': datapackage.get('terms', []),
                'tableschema': schema_fields,
                'title': datapackage['title'],
                'description': datapackage.get('description', 'No description'),
                'created': int(time.time()),
                'modified': int(time.time())
                'validmetadata': valid_metadata,
                'validdata': valid_data,
            }
            client = init_client()
            result = client.collections['datasets'].documents.upsert(document)

        main()
